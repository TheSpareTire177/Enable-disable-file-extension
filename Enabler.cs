using Microsoft.Win32;using System;using System.Diagnostics;using System.IO;namespace enabler{class Program{const string RegistryMenuPath=@"*\shell\EnablerMenu";static void Main(string[] args){if(args.Length==0){if(IsAdministrator())AddContextMenu();else Console.WriteLine("Please run as administrator to modify the registry.");}else if(args.Length==2){string action=args[0],filePath=args[1];if(action=="disable")DisableFile(filePath);else if(action=="enable")EnableFile(filePath);else Console.WriteLine("Unknown action.");}else Console.WriteLine("Invalid arguments.");}static void AddContextMenu(){try{string exePath=Process.GetCurrentProcess().MainModule?.FileName??throw new InvalidOperationException("Unable to determine the executable path.");using(var parentKey=Registry.ClassesRoot.CreateSubKey(RegistryMenuPath)){parentKey.SetValue("","Enabler Actions");parentKey.SetValue("SubCommands","");using(var disableKey=parentKey.CreateSubKey(@"shell\DisableFile")){disableKey.SetValue("","Disable File");using(var commandKey=disableKey.CreateSubKey("command"))commandKey.SetValue("",$"\"{exePath}\" disable \"%1\"");}using(var enableKey=parentKey.CreateSubKey(@"shell\EnableFile")){enableKey.SetValue("","Enable File");using(var commandKey=enableKey.CreateSubKey("command"))commandKey.SetValue("",$"\"{exePath}\" enable \"%1\"");}}}Console.WriteLine("Context menu items added successfully.");}catch(Exception ex){Console.WriteLine($"Failed to add context menu items: {ex.Message}");}}static void DisableFile(string filePath){try{if(filePath.EndsWith(".disabled")){Log("File is already disabled.");return;}if(!File.Exists(filePath)){Log("File does not exist.");return;}string disabledFilePath=filePath+".disabled";File.Move(filePath,disabledFilePath);Log($"File disabled: {filePath} -> {disabledFilePath}");}catch(Exception ex){Log($"Failed to disable file: {ex.Message}");}}static void EnableFile(string filePath){try{if(!filePath.EndsWith(".disabled")){Log("File is not disabled.");return;}if(!File.Exists(filePath)){Log("File does not exist.");return;}string enabledFilePath=filePath.Substring(0,filePath.Length-".disabled".Length);File.Move(filePath,enabledFilePath);Log($"File enabled: {filePath} -> {enabledFilePath}");}catch(Exception ex){Log($"Failed to enable file: {ex.Message}");}}static bool IsAdministrator(){try{var identity=System.Security.Principal.WindowsIdentity.GetCurrent();var principal=new System.Security.Principal.WindowsPrincipal(identity);return principal.IsInRole(System.Security.Principal.WindowsBuiltInRole.Administrator);}catch{return false;}}static void Log(string message){Console.WriteLine(message);}}}